import os
import time
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

TOKEN = 'YOUR_BOT_TOKEN'
DATA_FILE = 'user_data.json'
CHANNEL_ID = '@your_channel'  # آیدی کانال مورد نظر برای عضویت

# Load user data from JSON file
def load_user_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r') as file:
            return json.load(file)
    except json.JSONDecodeError:
        return {}

# Save user data to JSON file
def save_user_data():
    with open(DATA_FILE, 'w') as file:
        json.dump(users_data, file)

users_data = load_user_data()

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Hello! Welcome to the game bot! Type /game to start playing.')

def game(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    if user_id not in users_data:
        users_data[user_id] = {'coins': 0, 'bonus': False, 'bonus_start_time': None, 'tasks_done': {'join_channel': False, 'referrals': 0}}
        save_user_data()
    
    keyboard = [
        [InlineKeyboardButton("Click me!", callback_data='click')],
        [InlineKeyboardButton("Tasks", callback_data='tasks')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f'Your coin count: {users_data[user_id]["coins"]}', reply_markup=reply_markup)

def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    query.answer()

    if user_id not in users_data:
        users_data[user_id] = {'coins': 0, 'bonus': False, 'bonus_start_time': None, 'tasks_done': {'join_channel': False, 'referrals': 0}}

    user_data = users_data[user_id]
    current_time = time.time()

    if query.data == 'click':
        if user_data['bonus']:
            if current_time - user_data['bonus_start_time'] <= 30:
                user_data['coins'] += 5
            else:
                user_data['bonus'] = False
                user_data['coins'] += 1
        else:
            user_data['coins'] += 1

        if user_data['coins'] >= 2000 and not user_data['bonus']:
            user_data['bonus'] = True
            user_data['bonus_start_time'] = current_time

    elif query.data == 'tasks':
        show_tasks(update, context)

    save_user_data()

    keyboard = [
        [InlineKeyboardButton("Click me!", callback_data='click')],
        [InlineKeyboardButton("Tasks", callback_data='tasks')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f'Your coin count: {user_data["coins"]}', reply_markup=reply_markup)

def show_tasks(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    user_data = users_data[user_id]

    tasks_message = "Tasks:\n"
    tasks_message += "1. Join our channel: " + ("✅ Done" if user_data['tasks_done']['join_channel'] else "❌ Not done") + "\n"
    tasks_message += "2. Invite friends: " + str(user_data['tasks_done']['referrals']) + " invited\n"

    keyboard = [
        [InlineKeyboardButton("Join Channel", url=f"https://t.me/{CHANNEL_ID}", callback_data='join_channel')],
        [InlineKeyboardButton("Get Referral Link", callback_data='get_referral_link')],
        [InlineKeyboardButton("Back to Game", callback_data='click')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(tasks_message, reply_markup=reply_markup)

def check_channel_membership(update: Update, context: CallbackContext) -> None:
    user_id = str(update.callback_query.from_user.id)
    member_status = context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id).status
    if member_status in ['member', 'administrator', 'creator']:
        users_data[user_id]['tasks_done']['join_channel'] = True
        users_data[user_id]['coins'] += 1000
        save_user_data()
        update.callback_query.answer("You have successfully joined the channel and earned 1000 coins!")
    else:
        update.callback_query.answer("You are not a member of the channel. Please join first.")

def get_referral_link(update: Update, context: CallbackContext) -> None:
    user_id = str(update.callback_query.from_user.id)
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    update.callback_query.answer("Referral link copied to clipboard!")
    update.callback_query.message.reply_text(f"Your referral link: {referral_link}")

def start_referral(update: Update, context: CallbackContext) -> None:
    referrer_id = update.message.text.split()[1] if len(update.message.text.split()) > 1 else None
    if referrer_id and referrer_id in users_data:
        users_data[referrer_id]['coins'] += 300
        users_data[referrer_id]['tasks_done']['referrals'] += 1
        save_user_data()
        update.message.reply_text("You have been referred by a friend! They earned 300 coins!")

def main():
    updater = Updater(token=TOKEN, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("game", game))
    dispatcher.add_handler(CommandHandler("start", start_referral, pass_args=True))
    dispatcher.add_handler(CallbackQueryHandler(button, pattern='click'))
    dispatcher.add_handler(CallbackQueryHandler(show_tasks, pattern='tasks'))
    dispatcher.add_handler(CallbackQueryHandler(check_channel_membership, pattern='join_channel'))
    dispatcher.add_handler(CallbackQueryHandler(get_referral_link, pattern='get_referral_link'))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
